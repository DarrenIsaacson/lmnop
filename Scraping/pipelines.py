# -*- coding: utf-8 -*-

# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html

""" The pipeline file. Pipelines take the items generated by the spiders and process them, in this case by adding infomation to the database. """

from datetime import datetime
from lmn.models import Show, Venue, Artist
from Scraping.spiders.venue_spider import VenueSpider
from scrapy.crawler import CrawlerProcess

def get_date_object(datestring):
    if datestring.find(', ') != -1:
        datesplit = datestring.split(', ')
        datetime_object = datetime.strptime(datesplit[1])
    else:
        datetime_object = datetime.strptime(datestring)
    return datetime_object

class VenuePipeline(object):
    """ The venue pipeline creates a venue by converting a venue object into a venue model. """ 
    def process_item(self, item, spider):
        venue = Venue(name=item['name'], city=item['city'], state=item['state'])
        venue.save()
        return item

class ShowPipeline(object):
    """ The show pipeline ensures that the artist and venue exist in the database, creates them if they are not, and converts the event item into the show model. """
    def process_item(self, item, spider):
        # checks if artist exists, makes them if they don't. 
        if not Artist.objects.filter(name = item['artist']).exists():
            new_artist = Artist(name = item['artist'])
            new_artist.save()
        
        # checks if venue exists, if not runs the venue spider to get the name, city, and state of the venue.
        if not Venue.objects.filter(name = item['venue']).exists():
            venue_process = CrawlerProcess()
            venue_process.crawl(VenueSpider, url = item['url'])
            venue_process.start()

        if not Show.objects.filter(url=item['url']).exists():
            date_object = datetime.strptime(item['date'], '%A, %B %d, %Y')

            artist = Artist.objects.get(name=item['artist'])
            venue = Venue.objects.get(name=item['venue'])
            show = Show(artist = artist, venue = venue, name = item['name'], url = item['url'], time = item['time'], ages = item['ages'], show_date = date_object)
            show.save()

        return item

